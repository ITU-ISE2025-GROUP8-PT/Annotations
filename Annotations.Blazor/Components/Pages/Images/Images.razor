@page "/images/{imageId}"
@inject IHttpClientFactory ClientFactory
@inject IHttpContextAccessor httpContextAccessor
@inject IImagesServices imageService
@attribute [Authorize(Roles = "Administrator, Manager, AnnotationsUser")]

@if (error)
{
    <Error/>
}
else if (!imgExist)
{
    <p><em>No image found for @imageId</em></p>
} else
{
    <div class="container DivToScroll">
        <img class="displaySoloImage" src="data:image;base64, @image" alt="@altText" /><!--src is a URL - it's converted from a string of the byte array--> 
    </div>
}
@code{

    private string? image;//byte array as string
    private bool error = false;
    private bool imgExist = true;
    private string? altText;

    [Parameter] public string imageId { get; set; } = ""; //get access to parameter from URL/get request

    protected override async Task OnInitializedAsync()
    {

        var response = await imageService.createGetResponse($"/images/{imageId}");

        try
        {
            var jsonString = await response.Content.ReadAsStringAsync();//string of JSON file of the image as a string
            if (jsonString.Length == 0)
            {
                imgExist = false;
            }
            var imageObject = System.Text.Json.JsonSerializer.Deserialize<ImageModel>(jsonString) ?? throw new NoNullAllowedException();//JSON file becomes imageModel object
            var imageData = imageObject.ImageData;
            altText = imageObject.Description;
            image = System.Convert.ToBase64String(imageData);//byte array to string
        }
        catch 
        {
            Console.WriteLine("Status code: " + response.StatusCode);
            image = response.StatusCode.ToString();
            
            error = true;//there has been an error
        }

    }

}