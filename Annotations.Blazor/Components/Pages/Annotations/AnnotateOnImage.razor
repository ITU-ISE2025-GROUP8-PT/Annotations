@rendermode InteractiveServer
@page "/images/annotations"
@using System.Text.Json
@using global::Annotations.Blazor.Services
@using Home
@implements IDisposable
@inject NavigationManager Navigation
@inject IAPIServices IapiServices
@attribute [Authorize(Roles = "Administrator, Manager, AnnotationsUser")]



<PageTitle>Annotations</PageTitle>
<AuthorizeView>
    <Authorized>
        <MatThemeProvider Theme="@_theme">
            @* DialogBox for when completing a annotation, containing a text field for notes *@
            <MatDialog @bind-IsOpen="@_showCompletionDialog">
                <MatDialogTitle>@_completionTitle</MatDialogTitle>
                <MatDialogContent>
                    @_completionMessage
                    @if (_completionTitle == "Success")
                    {
                        <p>
                            <MatTextField @bind-Value="_currentVesselAnnotation!.Description"
                                          Label="Annotation"
                                          FullWidth="true"
                                          Immediate="true"
                                          Id="annotationTextField"
                                          class="MatOverwriteWhiteBG">
                            </MatTextField>
                        </p>
                    }
                </MatDialogContent>
                <MatDialogActions>
                    <MatButton OnClick="@(() =>
                                        {
                                            _showCompletionDialog = false;
                                            StateHasChanged();
                                        })">OK</MatButton>
                </MatDialogActions>
            </MatDialog>
            
            @* DialogBox that shown when clicking a segment. Thickness can be defined here *@
            <MatDialog @bind-IsOpen="_showSegmentDialog">
                <MatDialogTitle>Blood vessel segment annotation</MatDialogTitle>
                <MatDialogContent>
                    <p>
                        <MatTextField @bind-Value="_currentSegment!.Thickness"
                                      Label="Blood vessel thickness"
                                      FullWidth="true"
                                      Immediate="true"
                                      class="MatOverwriteWhiteBG">
                        </MatTextField>
                    </p>
                </MatDialogContent>
                <MatDialogActions>
                    <div>
                        <MatButton class="MatOverwriteButton" OnClick="SaveSegmentAnnotation">Save</MatButton>
                        <MatButton class="MatOverwriteButton" OnClick="CancelSegmentAnnotation">Cancel</MatButton>
                    </div>
                </MatDialogActions>
            </MatDialog>
            
            
            <div class="mat-layout-grid">
                <div class="mat-layout-grid-inner">
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                        @* Shows userdata in the left corner (currently hardcoded) *@
                        <div class="MatOverwriteGrid">
                            <img src="img/billede1.png" alt="Profile Picture" class="MatOverwriteProfilePic">
                            <div>
                                <b>Jane Doe</b>
                                <br/>
                                <small>Surgeon</small>
                            </div>
                        </div>
                        @* RadioButtons for selecting Annotation types. Radiobuttons ensure that only one button can be on at once *@
                        <div class="MatOverwriteMarginTop50">
                            <p>Choose a type here</p>
                            <MatRadioGroup @bind-Value="@_currentVesselAnnotation!.Type">
                                <div>
                                    <MatRadioButton Value="@("Arteries")" TValue="string">Arteries</MatRadioButton>
                                </div>
                                <div>
                                    <MatRadioButton Value="@("Veins")" TValue="string">Veins</MatRadioButton>
                                </div>
                            </MatRadioGroup>
                        </div>
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
                        <div class="mat-layout-grid-inner">
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                                @* Tab groups. Placeholders for features not yet implemented. The tabs currently does nothing *@
                                <div class="MatOverwriteIdentification">
                                    <MatTabGroup>
                                        <MatTab Label="Vessels">
                                            <div class="MatOverwritePadding16">
                                                <b>Blood Vessel Identification</b>
                                            </div>
                                        </MatTab>
                                        <MatTab Label="Flow">
                                            <div class="MatOverwritePadding16">
                                                <b>Blood Flow Identification</b>
                                            </div>
                                        </MatTab>
                                        <MatTab Label="Organs">
                                            <div class="MatOverwritePadding16">
                                                <b>Organ Identification</b>
                                            </div>
                                        </MatTab>
                                    </MatTabGroup>
                                </div>
                            </div>
                            @*  
                                The complete and skip buttons. 
                                Skip is just a placeholder. 
                                Complete saves the drawn annotation, and adds it to the visual "list" of trees shown to the right on the page.  
                            *@
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-9 mat-layout-grid-align-right">
                                <div class="MatOverwriteDecisions">
                                    <MatButton>Skip</MatButton>
                                    <MatButton OnClick="CompleteCurrentVessel" class="MatOverwriteButton">Complete</MatButton>
                                </div>
                            </div>
                        </div>
                        @*  
                            Draws the image getting annotated (image currently hardcoded) 
                            and logic for drawing the annotation trees
                        *@
                        <div class="MatOverwriteRelative" @ref="_imageContainer">
                            
                            <img src="img/SkÃ¦rmbillede%202025-03-27%20kl.%2014.05.56.png" alt="Annotation Image"
                                 @onclick="HandleImageClick" class="MatOverwriteWorkImage"/>

                            <svg @onpointermove="HandleDrag"
                                 @onpointerup="EndDrag"
                                 @onpointerleave="EndDrag"
                                 class="MatOverwriteSVG">
                                
                                @foreach (var vessel in _savedVessels!.Where(v => v.IsVisible))
                                {
                                    @foreach (var segment in vessel.Segments.Where(s => s.IsVisible))
                                    {
                                        <line x1="@segment.StartPoint.X" y1="@segment.StartPoint.Y"
                                              x2="@segment.EndPoint.X" y2="@segment.EndPoint.Y"
                                              stroke="transparent"
                                              stroke-width="20"
                                              pointer-events="visibleStroke"/>

                                        <line x1="@segment.StartPoint.X" y1="@segment.StartPoint.Y"
                                              x2="@segment.EndPoint.X" y2="@segment.EndPoint.Y"
                                              stroke="white"
                                              stroke-width="2"
                                              pointer-events="none"/>
                                    }

                                    @foreach (var point in vessel.Points.Where(p => p.IsVisible))
                                    {
                                        <circle cx="@point.X" cy="@point.Y" r="5"
                                                fill="red" stroke="white"
                                                stroke-width="2"
                                                class="MatOverwriteCursor"/>
                                    }
                                }

                                @* Current working annotation (always visible) *@
                                @if (_currentVesselAnnotation != null)
                                {
                                    @foreach (var segment in _currentVesselAnnotation.Segments)
                                    {
                                        <line x1="@segment.StartPoint.X" y1="@segment.StartPoint.Y"
                                              x2="@segment.EndPoint.X" y2="@segment.EndPoint.Y"
                                              stroke="transparent"
                                              stroke-width="20"
                                              @onclick="@(() => HandleSegmentClick(segment))"
                                              pointer-events="visibleStroke"/>

                                        <line x1="@segment.StartPoint.X" y1="@segment.StartPoint.Y"
                                              x2="@segment.EndPoint.X" y2="@segment.EndPoint.Y"
                                              stroke="@(_currentSegment == segment ? "red" : "white")"
                                              stroke-width="2"
                                              pointer-events="none"/>
                                    }

                                    @foreach (var point in _currentVesselAnnotation.Points)
                                    {
                                        <circle cx="@point.X" cy="@point.Y" r="10"
                                                fill="@(_currentPoint == point ? "#FFCCCB" : "red")"
                                                stroke="white"
                                                stroke-width="2"
                                                @onclick="@(e => HandlePointClick(e, point))"
                                                @onpointerdown="@(e => StartDrag(e, point))"
                                                class="MatOverwriteCursor"/>
                                    }
                                }
                            </svg>
                            
                            @if (_currentPoint != null)
                            {
                                <div style="position: absolute; bottom: 1%; right: 1%;">
                                    <MatIconButton Icon="delete" 
                                                   OnClick="DeleteSelectedPoint"
                                                   Style="color: white"
                                                   Title="Delete selected point">
                                    </MatIconButton>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                        @*
                            Creates a Expansion panel of all completed annotation trees 
                            Expansion panel is used because they can show the points and segments within a tree easily 
                        *@
                        <MatAccordion Multi="true">
                            @for (var i = 0; i < _savedVessels!.Count; i++)
                            {
                                var i1 = i;
                                <MatExpansionPanel>
                                    <MatExpansionPanelSummary>
                                        <MatExpansionPanelHeader>
                                            <div style="display: flex; align-items: center;">
                                                <span style="flex-grow: 1;">Tree @i1 (@_savedVessels[i1].Type)</span>
                                                <MatIconButton Icon="visibility_off" 
                                                               ToggleIcon="visibility" 
                                                               @bind-Toggled="@_savedVessels[i1].IsVisible"
                                                               OnClick="@(() => ToggleTreeVisibility(i1))">
                                                </MatIconButton>
                                            </div>
                                        </MatExpansionPanelHeader>
                                    </MatExpansionPanelSummary>
                                    <MatExpansionPanelDetails>
                                        <h6>Vessel Points</h6>
                                        @for (var j = 0; j < _savedVessels[i1].Points.Count; j++)
                                        {
                                            var j1 = j;
                                            var point = _savedVessels[i1].Points[j1];
                                            <p>
                                                point @j
                                                @* Visibility button that can be clicked to toggle/ untoggle points 
                                                   MatIconButton is chosen because its easy to change/ use icons with *@
                                                <MatIconButton Icon="visibility_off" ToggleIcon="visibility" @bind-Toggled="@point.IsVisible">
                                                </MatIconButton>
                                            </p>
                                        }
                                        <h6>Vessel Segments</h6>
                                        @for (var j = 0; j < _savedVessels[i1].Segments.Count; j++)
                                        {
                                            var j1 = j;
                                            var segment = _savedVessels[i1].Segments[j1];
                                            <p>
                                                segment @j
                                                @* Visibility button that can be clicked to toggle/ untoggle segments *@
                                                <MatIconButton Icon="visibility_off" ToggleIcon="visibility" @bind-Toggled="@segment.IsVisible">
                                                </MatIconButton>
                                            </p>
                                        }
                                    </MatExpansionPanelDetails>
                                </MatExpansionPanel>
                            }
                        </MatAccordion>
                    </div>
                </div>
            </div>
        </MatThemeProvider>
    </Authorized>
    <NotAuthorized>
        <Home/>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string? _currentUrl;

    private bool _showCompletionDialog;
    private string _completionMessage = "";
    private string _completionTitle = "";

    private bool _showSegmentDialog;
    
    private string _currentImagePath = "img/SkÃ¦rmbillede%202025-03-27%20kl.%2014.05.56.png";

    private VesselPointModel? _draggedPoint;
    private VesselPointModel? _currentPoint = new VesselPointModel
    {
        Id = 0,
        X = 0,
        Y = 0,
        IsVisible = true
    }; //maybe issue here
    private VesselSegmentModel? _currentSegment = new VesselSegmentModel
    {
        Id = 0,
        StartPoint = null!,
        EndPoint = null!,
        Thickness = 0,
        IsVisible = true
    }; //here

    private VesselAnnotationModel? _currentVesselAnnotation = new()
    {
        Id = 0,
        ImagePath = "",
        Points = new(),
        Segments = new(),
        Description = "",
        Type = "",
        IsVisible = true
    }; //here
    private List<VesselAnnotationModel>? _savedVessels = new();

    private List<VesselSegmentModel> _drawableSegments = new();
    private List<VesselPointModel> _drawablePoints = new();

    private double _currentThickness = 0.0;

    private ElementReference _imageContainer;


    MatTheme _theme = new MatTheme()
    {
        Primary = MatThemeColors.Green._800.Value
    };

    protected override async Task OnInitializedAsync()
    {
        _currentUrl = Navigation.Uri;
        Navigation.LocationChanged += OnLocationChanged;
        
        await LoadAnnotationsForImage(_currentImagePath);
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _currentUrl = Navigation.Uri;
        StateHasChanged();
    }
    
    private async Task LoadAnnotationsForImage(string imagePath)
    {
        try
        {
            var response = await IapiServices.CreateGetResponse($"/images/annotations?imagePath={Uri.EscapeDataString(imagePath)}");
            if (response.IsSuccessStatusCode)
            {
                var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };
            
                var content = await response.Content.ReadAsStringAsync();
                _savedVessels = JsonSerializer.Deserialize<List<VesselAnnotationModel>>(content, options);
                PrecomputeAnnotations();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading annotations: {ex.Message}");
        }
    }
    
    private void HandleSegmentClick(VesselSegmentModel segment)
    {
        _currentSegment = segment;
        _showSegmentDialog = true;

        StateHasChanged();
    }
    
    private void HandlePointClick(MouseEventArgs e, VesselPointModel point)
    {
        _currentPoint = point;
    }
    
    public void Dispose() => Navigation.LocationChanged -= OnLocationChanged;

    private void PrecomputeAnnotations()
    {
        _drawableSegments.Clear();
        _drawablePoints.Clear();

        foreach (var vessel in _savedVessels!)
        {
            if (vessel.Segments != null)
            {
                _drawableSegments.AddRange(vessel.Segments);
            }

            if (vessel.Points != null)
            {
                _drawablePoints.AddRange(vessel.Points.Where(point => point != null).Cast<VesselPointModel>());
            }
        }
    }

    private void SaveVesselAnnotation(VesselPointModel lastPoint)
    {
        if (_currentVesselAnnotation != null)
        {
            _currentVesselAnnotation.Points.Add(_currentPoint!);

            if (_currentVesselAnnotation.Points.Count > 1)
            {
                var segment = new VesselSegmentModel
                {
                    Id = 0,
                    StartPoint = lastPoint,
                    EndPoint = _currentPoint!,
                    Thickness = _currentThickness,
                    IsVisible = true
                };
                //segment.IsVisible = true;
                _currentVesselAnnotation.Segments.Add(segment);
            }
        }

        _currentPoint!.IsVisible = true;
        StateHasChanged();
        PrecomputeAnnotations();
    }

    private void SaveSegmentAnnotation()
    {
        _showSegmentDialog = false;
        StateHasChanged();
        PrecomputeAnnotations();
    }

    private void CancelSegmentAnnotation()
    {
        _showSegmentDialog = false;
        StateHasChanged();
    }

    private async Task CompleteCurrentVessel()
    {
        if (_currentVesselAnnotation?.Points.Count < 2)
        {
            _completionTitle = "Fail";
            _completionMessage = "Your blood vessel tree needs at least two annotations";
            _showCompletionDialog = true;
            StateHasChanged();
            return;
        }
        
        if (_currentVesselAnnotation!.Type == "")
        {
            _completionTitle = "Fail";
            _completionMessage = "Please choose a type.";
            _showCompletionDialog = true;
            StateHasChanged();
            return;
        }

        await SaveAnnotationToDb(_currentVesselAnnotation!);
        
        _currentVesselAnnotation = new VesselAnnotationModel
        {
            Id = 0,
            ImagePath = "",
            Points = new(),
            Segments = new(),
            Description = "",
            Type = "",
            IsVisible = true
        };

        _completionTitle = "Success";
        _completionMessage = "Your blood vessel tree has been successfully completed";
        _showCompletionDialog = true;

        PrecomputeAnnotations();
        StateHasChanged();
    }

    private async Task SaveAnnotationToDb(VesselAnnotationModel vessel)
    {
        vessel.ImagePath = _currentImagePath;
        //try
        //{
        var response = await IapiServices.CreatePostRequest($"/images/annotations/save", vessel); 
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine("Error with post request for Annotation");
        }
        else
        {
            _savedVessels!.Add(_currentVesselAnnotation!);
            await LoadAnnotationsForImage(_currentImagePath);
        }
        //}
        //catch
        //{
        //error handling?
        //}
    }
    
    private void DeleteSelectedPoint()
    {
        if (_currentVesselAnnotation == null || _currentPoint == null) 
            return;

        if (CanDeletePoint(_currentPoint))
        {
            // Remove the point
            _currentVesselAnnotation.Points.Remove(_currentPoint);

            // Remove connected segments
            var segmentsToRemove = _currentVesselAnnotation.Segments
                .Where(s => s.StartPoint == _currentPoint || s.EndPoint == _currentPoint)
                .ToList();
            
            foreach (var segment in segmentsToRemove)
            {
                _currentVesselAnnotation.Segments.Remove(segment);
            }

            _currentPoint = _currentVesselAnnotation.Points.Count == 0 ? null : _currentVesselAnnotation.Points[0];
        } 
        
        StateHasChanged();
    }
    
    private bool CanDeletePoint(VesselPointModel point)
    {
        if (_currentVesselAnnotation == null) return false;
    
        var connections = _currentVesselAnnotation.Segments
            .Count(s => s.StartPoint == point || s.EndPoint == point);
        
        return _currentVesselAnnotation.Points.Count == 1 ||  // Only point
               connections <= 1 ||                           // Leaf node
               point == _currentVesselAnnotation.Points.Last(); // Last added
    }
    
    private async Task HandleImageClick(MouseEventArgs e)
    {
        var rect = await JsRuntime.InvokeAsync<BoundingClientRect>(
            "getBoundingClientRect", _imageContainer);

        var lastPoint = _currentPoint; 
        _currentPoint = new VesselPointModel
        {
            Id = 0, //arbitrary
            X = (int)(e.ClientX - rect.Left),
            Y = (int)(e.ClientY - rect.Top),
            IsVisible = true
        };

        SaveVesselAnnotation(lastPoint!);

        StateHasChanged();
    }

    private void StartDrag(PointerEventArgs e, VesselPointModel point)
    {
        _draggedPoint = point;
    }

    private async Task HandleDrag(PointerEventArgs e)
    {
        if (_draggedPoint == null) return;

        var rect = await JsRuntime.InvokeAsync<BoundingClientRect>(
            "getBoundingClientRect", _imageContainer);

        _draggedPoint.X = (int)(e.ClientX - rect.Left);
        _draggedPoint.Y = (int)(e.ClientY - rect.Top);

        StateHasChanged();
    }

    private void EndDrag() => _draggedPoint = null;
    
    private void ToggleTreeVisibility(int treeIndex)
    {
        var tree = _savedVessels![treeIndex];
        foreach (var point in tree.Points)
        {
            point.IsVisible = tree.IsVisible;
        }
        foreach (var segment in tree.Segments)
        {
            segment.IsVisible = tree.IsVisible;
        }
        StateHasChanged();
    }

    private struct BoundingClientRect
    {
        public double Left { get; set; }
        public double Top { get; set; }
    }

    [Inject] private IJSRuntime JsRuntime { get; set; } = default!;
}
