@using MatBlazor
@using Microsoft.AspNetCore.Authentication
@page "/images/filter/{category}"
@using global::Annotations.Core.Models
@using Microsoft.AspNetCore.Authentication
@inject IHttpClientFactory ClientFactory
@inject IHttpContextAccessor httpContextAccessor

<style>
    .displayImages {
        width: 100%;
        padding: 5%;

    }
    .container {
        display:  grid;
        grid-template-columns: auto auto auto;
        padding: 20px;

    }
    /* width */
    ::-webkit-scrollbar {
        width: 10px;
    }

    /* Track */
    ::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    /* Handle */
    ::-webkit-scrollbar-thumb {
        background: #888;
    }

    /* Handle on hover */
    ::-webkit-scrollbar-thumb:hover {
        background: #555;
    }
</style>
@if (images==null)
{
    <p><em>No images found</em></p>
}
else
{
        <div class="container">
            @foreach (var word in images)
            {
                <img class = "displayImages" src="data:image;base64, @word" />   
            }
        </div>
    
    
}
@code{
    [Parameter]
    public string category { get; set; }
    private string[]? images;

    protected override async Task OnInitializedAsync()
    {
        var httpContext = httpContextAccessor.HttpContext ?? throw new InvalidOperationException("No HttpContext available");

        var accessToken = await httpContext.GetTokenAsync("access_token") ?? throw new InvalidOperationException("No access_token was saved");

        var client = ClientFactory.CreateClient();
        client.BaseAddress = new("https://localhost:7250");

        using var requestMessage = new HttpRequestMessage(HttpMethod.Get, $"/images/filter/{category}");
        requestMessage.Headers.Authorization = new("Bearer", accessToken);

        using var response = await client.SendAsync(requestMessage);
        try
        {
            string[] answer = await response.Content.ReadFromJsonAsync<string[]>();
            images = new string[answer.Length];
            for (int i = 0; i < answer.Length; i++)
            {
                var personObject = System.Text.Json.JsonSerializer.Deserialize<ImageModel>(answer[i]);
                var imageData = personObject.ImageData;
                images[i] = System.Convert.ToBase64String(imageData);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Status code: " + response.StatusCode);
            images = new string[1];
            images[0] = response.StatusCode.ToString();
        }

    }

}