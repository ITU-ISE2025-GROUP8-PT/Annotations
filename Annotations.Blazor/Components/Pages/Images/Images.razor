@page "/images/{imageId}"
@using global::Annotations.Blazor.Services
@inject IHttpClientFactory ClientFactory
@inject IHttpContextAccessor httpContextAccessor
@inject IAPIServices IapiService
@attribute [Authorize(Roles = "Administrator, Manager, AnnotationsUser")]

@if (error)
{
    <Error/>
}
else if (!imgExist)
{
    <p><em>No image found for @imageId</em></p>
} else
{
    <div class="container DivToScroll">
        @* src is a URL - it's converted from a string of the byte array *@
        <img class="displaySoloImage" src="data:image;base64, @image" alt="@altText"/>
    </div>
}
@code{

    @* note that this is a string stored on the basis of the imageId and the byte array *@
    private string? image;
    private bool error = false;
    private bool imgExist = true;
    private string? altText;

    @* get access to parameter from URL/get request *@
    [Parameter] public string imageId { get; set; } = ""; 

    protected override async Task OnInitializedAsync()
    {
        var response = await IapiService.CreateGetResponse($"/images/{imageId}");

        try
        {
            @* string array of JSON files of the images as strings *@
            var jsonString = await response.Content.ReadAsStringAsync();
            if (jsonString.Length == 0)
            {
                imgExist = false;
            }
            var imageObject = System.Text.Json.JsonSerializer.Deserialize<ImageModel>(jsonString) ?? throw new NoNullAllowedException();//JSON file becomes imageModel object
            var imageData = imageObject.ImageData;
            altText = imageObject.Description;
            @* byte array to string *@
            image = System.Convert.ToBase64String(imageData);
        }
        catch 
        {
            image = response.StatusCode.ToString();
            error = true;
        }
    }
}