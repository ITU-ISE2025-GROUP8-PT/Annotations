openapi: 3.1.0
info:
  title: Annotations PerfusionTech
  description: |
    This API allows medical professionals to annotate angiographic image,
    and allows the admin user to upload and delete angiographic images.
  version: 1.0.0
tags:
  - name: Reviews
    description: Operations related to the reviewing angiographic images.
  - name: Annotations
    description: Operations related to the annotating angiographic images.
  - name: Images
    description: Operations related to managing the angiographic images.
  - name: Users
    description: Operations related to managing users and user roles.
paths:
  /uploadImage: # If admin ID is required for this endpoint, maybe add it to path: /{adminId}/uploadImage
    post:
      summary: Upload an image
      description: Admin can upload angiographic images for reviewers and annotators to use.
      tags:
        - Images
      operationId: postImage # Used to make method names, when generating code
      # TODO: identify security measures for such operations
      requestBody:
        content:
          multipart/form-data: # Swagger Docs for file upload
            schema:
              $ref: '#/components/schemas/Image'
              required:
                - file
      responses:
        '200':
          description: Image uploaded successfully
        '403':
          description: Forbidden (user not authorized)
          content:
            application/json:
              schema:
                type: string
                example: "You are not authorized to upload this image"
        '401':
          description: Unauthorized (authentication required)
          content:
            application/json:
              schema:
                type: string
                example: "Authentication required"
  /images/{imageId}:
    delete:
      summary: Delete an image
      description: An admin user role, can delete angiographic images if needed.
      tags:
        - Images
      operationId: deleteImage
      # TODO: identify security measures for such operations
      parameters:
        - name: imageId
          in: path
          required: true
          schema:
            type: string
          description: The unique image ID for the specified image
      responses:
        '204': # Successful request, with nothing to be returned to the client
          description: Image was successfully deleted
        '404':
          description: Image not found
          content:
            application/json:
              schema:
                type: string
                example: "Image not found"
        '403':
          description: Forbidden (user not authorized)
          content:
            application/json:
              schema:
                type: string
                example: "You are not authorized to delete this image"
        '401':
          description: Unauthorized (authentication required)
          content:
            application/json:
              schema:
                type: string
                example: "Authentication required"
    get:
      summary: Get an image by imageId
      description: All user roles will be able to access an image by imageId
      tags:
        - Images
      operationId: getImage
      parameters:
        - name: imageId
          in: path
          required: true
          schema:
            type: string
          description: The unique image ID for the specified image
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Image not found
  /user:
    post:
      summary: Create user
      description: User registration by the logged in user.
      operationId: createUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
  /user/login:
    get:
      summary: User login
      description: User can login to an already created account.
      operationId: userLogin
      tags:
        - Users
      parameters:
        - in: query
          name: username
          description: The username of the user for login
          required: true
          schema:
            type: string
        - in: query
          name: password
          description: The user's password for login
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User successfully logged in
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      summary: Logs out current logged in user session
      description: 
      operationId: userLogout
      tags:
        - Users
      responses:
        '200':
          description: The user was successfully logged out
  /user/{username}:
    put:
      summary: Update the user, with the specified username
      description:
      operationId: updateUser
      tags:
        - Users
      parameters:
      - in: path
        name: username
        description: Username that needs to be updated
        required: true
        schema:
          type: string
      - in: body
        name: body
        description: Updated user object
        required: true
        schema:
          $ref: '#/components/schemas/User'
        
    
    
      
components: 
  schemas:
    User:
      type: object
      properties: 
        id:
          type: integer
          format: "int64"
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        jobTitle:
          type: string
        affiliation:
          type: string
        profilePicture:
          type: object
          properties: 
            file:
              type: string
              format: binary
              description: Image file
    Image:
      type: object
      properties:
        file:
          type: string
          format: binary
          description: The image file to upload
        title:
          type: string
          description: A title for the image
        text:
          type: string
          description: A description of the image    
        userRole:
          type: string
          description: The specified user's authorization
          enum: ["admin", "annotator", "reviewer"]
