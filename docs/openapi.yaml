openapi: 3.0.3
info:
  title: Annotations PerfusionTech
  description: |
    This API allows medical professionals to annotate angiographic images, and review other users' annotations.
    The API allows the Admin user role to upload and delete angiographic images.
    Users can only be created or deleted by any user with the Admin user role, following RBAC principles.
    
  version: 1.1.0
tags:
  - name: Reviews
    description: Operations related to reviewing angiographic images.
  - name: Annotations
    description: Operations related to annotating angiographic images.
  - name: Images
    description: Operations related to managing the angiographic images.
  - name: Users
    description: Operations related to managing users and user roles.
paths:
  /images/upload: # If admin ID is required for this endpoint, maybe add it to path: /{adminId}/uploadImage
    post:
      summary: Upload an image
      description: Admin can upload angiographic images for reviewers and annotators to use.
      tags:
        - Images
      operationId: postImage # Used to make method names, when generating code
      # TODO: identify security measures for such operations
      requestBody:
        content:
          multipart/form-data: # Swagger Docs for file upload
            schema:
              $ref: '#/components/schemas/ImageRequest'
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/Image'
        '403':
          description: Forbidden (user not authorized)
          content:
            application/json:
              schema:
                type: string
                example: "You are not authorized to upload this image"
        '401':
          description: Unauthorized (authentication required)
          content:
            application/json:
              schema:
                type: string
                example: "Authentication required"
  /images/{imageId}:
    delete:
      summary: Delete an image
      description: An admin user role, can delete angiographic images if needed.
      tags:
        - Images
      operationId: deleteImage
      # TODO: identify security measures for such operations
      parameters:
        - name: imageId
          in: path
          required: true
          schema:
            type: string
          description: The unique image ID for the specified image
      responses:
        '204': # Successful request, with nothing to be returned to the client
          description: Image was successfully deleted
        '404':
          description: Image not found
          content:
            application/json:
              schema:
                type: string
                example: "Image not found"
        '403':
          description: Forbidden (user not authorized)
          content:
            application/json:
              schema:
                type: string
                example: "You are not authorized to delete this image"
        '401':
          description: Unauthorized (authentication required)
          content:
            application/json:
              schema:
                type: string
                example: "Authentication required"
    get:
      summary: Get an image by imageId
      description: All user roles will be able to access an image by imageId
      tags:
        - Images
      operationId: getImage
      parameters:
        - name: imageId
          in: path
          required: true
          schema:
            type: string
          description: The unique image ID for the specified image
      responses:
        '200':
          description: Successful operation
          content:
            application/json: 
              schema:
                type: string
                example: "Successful operation"
        '400':
          description: Invalid ID supplied
        '404':
          description: Image not found
    patch:
      summary: Update an image
      description: Partially update an already existing image's description
      operationId: updateImage
      tags:
        - Images
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: A title for the image
                text:
                  type: string
                  description: A description of the image
      responses:
        '200':
          description: Image updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'            
  /images/{imageId}/annotations:
    post:
      summary: Create a new annotation for an angiographic image
      operationId: createAnnotation
      tags:
        - Annotations
      requestBody:
        description: One Annotation object made by the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnotationRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotation'
    get:
      summary: Retrieve all annotations for a specific image
      description: ""
      operationId: getAnnotations
      tags:
        - Annotations
      parameters:
        - in: path
          name: imageId
          description: The image ID of the image on which the annotations where made
          required: true
          schema:
            type: integer
            format: "int64"
      responses:
        '200':
          description: The annotations were successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Annotation'
        '400':
          description: Invalid image ID supplied
  /annotations/{annotationId}:
    patch:
      summary: Update an annotation
      operationId: updateAnnotation
      tags:
        - Annotations
      parameters:
        - in: path
          name: annotationId
          description: The annotation ID of the annotation to be updated
          required: true
          schema:
            type: integer
            format: "int64"
      requestBody:
        description: The updated Annotation object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnotationRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotation'        
    delete:
      summary: Delete an annotation
      description: Can only be done by the Admin user role, or the annotator of the annotation
      tags:
        - Annotations
      operationId: deleteAnnotation
      parameters:
        - name: annotationId
          in: path
          required: true
          schema:
            type: integer
            format: "int64"
          description: Annotation ID of the annotation that needs to be deleted
      responses:
        '204':
          description: Annotation was successfully deleted, nothing to return
        '400':
          description: Invalid annotation ID supplied
        '404':
          description: Annotation not found
  /annotations/{annotationId}/review:
    post:
      summary: Add a review to an annotation
      operationId: createReview
      tags:
        - Reviews
      requestBody:
        description: The review object 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
              
      responses:
        '200':
          description: Review was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
  /reviews/{reviewId}:              
    patch:
      summary: Update a review
      description: Can only be done by the Admin user role, or the reviewer of the annotation
      operationId: updateReview
      tags:
        - Reviews
      parameters:
        - in: path
          name: reviewId
          description: The review ID of the review to be updated
          required: true
          schema:
            type: integer
            format: "int64"
      requestBody:
        description: The updated Review object
        required: true
        content:
          application/json:
            schema:
              type: string
              description: The body of the updated review
      responses:
        '200':
          description: Review was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'        
    delete:
      summary: Delete a review
      description: Can only be done by the Admin user role, or the reviewer of the annotation
      tags:
        - Reviews
      operationId: deleteReview
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: integer
            format: "int64"
          description: Review ID of the review that needs to be deleted
      responses:
        '204':
          description: Review was successfully deleted, nothing to return
        '400':
          description: Invalid review ID supplied
        '404':
          description: Review not found
  /admin/user:
    post:
      summary: Create a new user (Admin only)
      description: Only users with the admin role can access this endpoint.
      operationId: createUser
      tags:
        - Users
      requestBody:
        description: A user create request with necessary metadata for the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '200':
          description: User was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Forbidden (user does not have admin role)
        '401':
          description: Unauthorized (invalid or missing token)        
  /auth/login:
    post:
      summary: User login
      description: User can login to an already created account and receive a user token using Oauth or JWT.
      operationId: userLogin
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: User successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Invalid email/password supplied
  /auth/logout:
    post: # post instead of get, becuase both login and logout change the state of the program in some way
      summary: Logs out current logged in user session
      description: ""
      operationId: userLogout
      tags:
        - Users
      responses:
        '200':
          description: The user was successfully logged out
  /users/{userId}:
    patch:
      summary: Update the user, with the specified user ID
      description: ""
      operationId: updateUser
      tags:
        - Users
      parameters:
      - in: path
        name: userID
        description: User ID that needs to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '400':
          description: Invalid input
    delete:
      summary: Delete user
      description: Can only be done by the user that is logged in, or users with the Admin role
      tags:
        - Users
      operationId: deleteUser
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string
          description: User ID that needs to be deleted
      responses:
        '204':
          description: User was successfully deleted, nothing to return
        '400':
          description: Invalid user ID supplied
        '404':
          description: User not found
    get:
      summary: Get user by user ID
      tags:
        - Users
      operationId: getUser
      parameters:
        - in: path
          name: userID
          required: true
          schema:
            type: string
          description: The user being queried
      responses:
        '200':
          description: The user was successfully found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        
components: 
  schemas:
    UserCreateRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
          description: Some generated password, that can later be changed by the user
        phone:
          type: string
        jobTitle:
          type: string
        affiliation:
          type: string
        profilePicture:
          type: string
          format: binary
        userRole:
          type: string
          enum: [ "admin", "annotator", "reviewer" ]
      required:
        - email
        - password
        - role
    UserUpdateRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        jobTitle:
          type: string
        affiliation:
          type: string
        profilePicture:
          type: string
          format: binary
        userRole:
          type: string
          description: The specified user's authorization (Can only be changed by Admin)
          enum: [ "admin", "annotator", "reviewer" ]
    User:
      type: object
      properties: 
        id:
          type: integer
          format: "int64"
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        jobTitle:
          type: string
        affiliation:
          type: string
        profilePicture:
          type: string
          format: binary
        totalAssignmentsFinished:
          type: integer
        userRole:
          type: string
          description: The specified user's authorization
          enum: [ "admin", "annotator", "reviewer" ]
      required:
        - id
        - password
        - userRole
    Image:
      type: object
      properties:
        id:
          type: integer
          format: "int64"
        uploadedBy:
          type: integer
          format: "int64"
          description: The ID of the Admin that uploaded the image
        deletedBy:
          type: integer
          format: "int64"
          description: The ID of the Admin that deleted the image
        imageString:
          type: string
          format: binary
          description: The image file to upload
        title:
          type: string
          description: A title for the image
        description: #name of the field
          type: string
          description: A description of the image    
      required:
        - id
        - imageString
    ImageRequest:
      type: object
      properties:
        imageString:
          type: string
          format: binary
          description: The image file to upload
        title:
          type: string
          description: A title for the image
        description: #name of the field
          type: string
          description: A description of the image
      required:
        - imageString
    Annotation:
      type: object
      properties: 
        imgId:
          type: integer
          format: "int64"
        mpId:
          type: integer
          format: "int64"
        id:
          type: integer
          format: "int64"
        annotationType:
          type: string
          description: The type of annotation made by the user
          # TODO: make enum of different annotation types
        annotations:
          type: string
          description: The annotations made by the user on the specific image
      required:
        - imgId
        - mpId
        - id
    AnnotationRequest:
      type: object
      properties:
        annotationType:
          type: string
          description: The type of annotation made by the user
          # TODO: make enum of different annotation types
        annotations:
          type: string
          description: The annotations made by the user on the specific image
    Review:
      type: object
      properties:
        aId:
          type: integer
          format: "int64"
        mpId:
          type: integer
          format: "int64"
        id:
          type: integer
          format: "int64"
        review:
          type: string
          description: The body of the user's review 
        accepted:
          type: boolean
          description: Whether or not the review has been accepted
      required:
        - aId
        - mpId
        - id
        - review
    ReviewRequest:
      type: object
      properties:
        review:
          type: string
          description: The body of the user's review
        accepted:
          type: boolean
          description: Whether or not the review has been accepted