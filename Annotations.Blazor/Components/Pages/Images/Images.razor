@using Microsoft.AspNetCore.Authentication
@page "/images/{imageId}"
@using global::Annotations.Core.Models

@inject IHttpClientFactory ClientFactory
@inject IHttpContextAccessor httpContextAccessor

@if (error)
{
    <p><em>No image found</em></p>
}
else
{
    <img src="data:image;base64, @image" alt="@altText" />

}
@code{

    private string? image;
    private bool error = false;
    private string? altText;

    [Parameter] public string imageId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var httpContext = httpContextAccessor.HttpContext ?? throw new InvalidOperationException("No HttpContext available");

        var accessToken = await httpContext.GetTokenAsync("access_token") ?? throw new InvalidOperationException("No access_token was saved");

        var client = ClientFactory.CreateClient();
        client.BaseAddress = new("https://localhost:7250");

        using var requestMessage = new HttpRequestMessage(HttpMethod.Get, $"/images/{imageId}");
        requestMessage.Headers.Authorization = new("Bearer", accessToken);

        using var response = await client.SendAsync(requestMessage);
        try
        {
            var jsonString = await response.Content.ReadAsStringAsync();

            var imageObject = System.Text.Json.JsonSerializer.Deserialize<ImageModel>(jsonString);
            var imageData = imageObject.ImageData;
            altText = imageObject.Description;
            image = System.Convert.ToBase64String(imageData);
        }
        catch (Exception e)
        {
            Console.WriteLine("Status code: " + response.StatusCode);
            image = response.StatusCode.ToString();
            error = true;
        }

    }

}