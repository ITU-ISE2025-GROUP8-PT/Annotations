@rendermode InteractiveServer
@page "/images/datasets/{datasetId}/"
@inject IAPIServices IapiServices
@attribute [Authorize(Roles = "Administrator, Manager")]


@if (_errorExist)
{
    <Error/>
}
@* This will show on screen in a milisecond before imgs load. Should it be "Loading..."? *@
else if (Images.Length == 0)
{
    <p><em>Please wait a few seconds. If no images load, this dataset is empty.</em></p>
} 
else
{
    @* To make both lines on the same row *@
    <div style=" display: flex; flex-direction:row;">
        <span style="padding:2%; font-weight: bold; width: 90%; font-size: 215%">Dataset @datasetId</span>
        <button class="filterButton">Filter by...</button>
    </div>

    <div class="container DivTohÃ¸jrereScroll" >
    @* Virtualize is a special loop that loops OverscanCount data - here the imgs received from API *@
        <Virtualize ItemsProvider="@LoadImages" OverscanCount="15">
            @* OverscanCount must always be divisible by 3! As we have 3 imgs per line
            It represents the number of images loaded before and after current position *@
            <ItemContent>
                <img class="displayImages" src="@GetImageSource(@context.Base64Data)" alt="@context.AltText" />
            </ItemContent>
        </Virtualize> 
    </div> 
}

@code
{
    @* TODO: code duplication from Image.Filter.razor *@
    
    [Parameter] public string datasetId { get; set; } = "";
    @* All images from API is turned into a local datatype class (see further down) *@
    private ImageModelWeb[] Images = Array.Empty<ImageModelWeb>();
    private bool _errorExist;
    
    protected override async Task OnInitializedAsync()
    {
        var response = await IapiServices.createGetResponse( $"/images/datasets/{datasetId}");

            try
            {
                @* string array of JSON files of the images as strings *@
                string[] answer = await response.Content.ReadFromJsonAsync<string[]>() ?? throw new NoNullAllowedException();

                @* initialize array for storing images to be shown on the webpage *@
                Images = new ImageModelWeb[answer.Length];

                for (int i = 0; i < answer.Length; i++)
                {
                    var imageObject = System.Text.Json.JsonSerializer.Deserialize<ImageModel>(answer[i]);
                    ArgumentNullException.ThrowIfNull(imageObject);
                    await Task.Yield();
                    var imageData = imageObject.ImageData;

                    @* Adding Base64 data and alt text as local ImageModel type to array *@
                    Images[i] = new ImageModelWeb(Convert.ToBase64String(imageData), imageObject.Description);
                }
            }
            catch
            {
                @* Handles if nothing being retrieved *@
                Images = new ImageModelWeb[1];
                Images[0] = new ImageModelWeb("", response.StatusCode.ToString());
                _errorExist = true;
            }
    }

    @* local datatype class for images *@
    public class ImageModelWeb 
    {
        public string Base64Data {get; set;}
        public string AltText {get; set;}
        
        public ImageModelWeb (string base64DataInput, string altTextInput) {
            Base64Data = base64DataInput;
            AltText = altTextInput;
        }
    }

    @* Define an item provider - IEnumerable of items to iterate over for Virtualize 
        Code inspired by: https://toxigon.com/implementing-lazy-loading-in-blazor *@
    private async ValueTask<ItemsProviderResult<ImageModelWeb>> LoadImages(ItemsProviderRequest request)
    {
        await Task.Yield();
         return new ItemsProviderResult<ImageModelWeb>(Images, Images.Length);
    } 

    @* Converts the image base64 string into an url the website can render as an image. *@
    public string GetImageSource(string base64)
    {
        return $"data:image;base64,{base64}";
    }
}