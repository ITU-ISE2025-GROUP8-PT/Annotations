openapi: 3.0.3
info:
  title: Annotations PerfusionTech
  description:  |
    This API allows medical professionals to annotate angiographic images, and review other users' annotations.
    The API allows the Admin user role to upload and delete angiographic images.
    Users can only be created or deleted by any user with the Admin user role, following RBAC principles.
    
  version: 1.3.0
tags:
  - name: Reviews
    description: Endpoints related to reviewing angiographic images (not implemented).
  - name: Annotations
    description: Endpoints related to annotating angiographic images.
  - name: Images
    description: Endpoints related to managing the angiographic images.
  - name: Users
    description: Endpoints related to managing users and user roles. Most of these endpoints are handled by the CMS system Orchard Core, maintaining our user base.
  - name: Datasets
    description: Endpoints related to managing datasets of angiographic images.
    
paths:
  /images/upload:
    post:
      summary: Upload an image
      description: Admin can upload angiographic images for reviewers and annotators to use.
      tags:
        - Images
      parameters:
        - name: category
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - image
              type: object
              properties:
                image:
                  type: string
                  format: binary
            encoding:
              image:
                style: form
      responses:
        '201':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageUploaderResult'
  /images/delete/{imageId}:
    delete:
      summary: Delete an image
      description: An admin user role, can delete angiographic images if needed.
      tags:
        - Images
      parameters:
        - name: imageId
          in: path
          required: true
          schema:
            type: integer
            format: int32
          description: The unique image ID for the specified image
      responses:
        '204': # Successful request, with nothing to be returned to the client
          description: Image was successfully deleted
        '404':
          description: Image not found
        '401':
          description: Unauthorized (authentication required)
  /images/get/{imageId}:
    get:
      summary: Get an image by imageId
      description: All user roles will be able to access an image by imageId
      tags:
        - Images
      parameters:
        - name: imageId
          in: path
          required: true
          schema:
            type: integer
            format: int32
          description: The unique image ID for the specified image
      responses:
        '200':
          description: OK
        '404':
          description: Image not found
  /images/get-metadata/{imageId}:
    get:
      tags:
        - Images
      parameters:
        - name: imageId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /images/filter/{category}:
    get:
      tags:
        - Images
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImageModel'
                  
  /images/annotations/save:
    post:
      tags:
        - Annotations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VesselAnnotationModel'
        required: true
      responses:
        '200':
          description: OK
  /images/annotations/{annotationId}:
    get:
      tags:
        - Annotations
      parameters:
        - name: annotationId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotation'
  /images/annotations:
    get:
      tags:
        - Annotations
      parameters:
        - name: imagePath
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  
  /annotations/{annotationId}/review:
    post:
      summary: Add a review to an annotation
      operationId: createReview
      tags:
        - Reviews
      requestBody:
        description: The review object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
      responses:
        '200':
          description: Review was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
  /reviews/{reviewId}:              
    patch:
      summary: Update a review
      description: Can only be done by the Admin user role, or the reviewer of the annotation
      operationId: updateReview
      tags:
        - Reviews
      parameters:
        - in: path
          name: reviewId
          description: The review ID of the review to be updated
          required: true
          schema:
            type: integer
            format: "int64"
      requestBody:
        description: The updated Review object
        required: true
        content:
          application/json:
            schema:
              type: string
              description: The body of the updated review
      responses:
        '200':
          description: Review was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'        
    delete:
      summary: Delete a review
      description: Can only be done by the Admin user role, or the reviewer of the annotation
      tags:
        - Reviews
      operationId: deleteReview
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: integer
            format: "int64"
          description: Review ID of the review that needs to be deleted
      responses:
        '204':
          description: Review was successfully deleted, nothing to return
        '400':
          description: Invalid review ID supplied
        '404':
          description: Review not found
          
  /users/users:
    get:
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserModel'
                  
  /datasets/overview:
    get:
      tags:
        - Datasets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DatasetModel'
  /datasets/get/{datasetId}:
    get:
      tags:
        - Datasets
      parameters:
        - name: datasetId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /datasets/create:
    post:
      tags:
        - Datasets
      parameters:
        - name: title
          in: query
          required: true
          schema:
            type: string
        - name: category
          in: query
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModifyDatasetResult'
  /datasets/delete/{datasetId}:
    delete:
      tags:
        - Datasets
      parameters:
        - name: datasetId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
        '404':
          description: Dataset not found
  /datasets/set-images/{datasetId}:
    put:
      tags:
        - Datasets
      parameters:
        - name: datasetId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
        required: true
      responses:
        '201':
          description: Dataset images updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModifyDatasetResult'
        '404':
          description: Dataset or images not found
        
components: 
  schemas:
    ImageModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
        title:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        category:
          type: string
          nullable: true
        datasetsIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
      additionalProperties: false
    ImageUploaderResult:
      required:
        - statusCode
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
        error:
          type: string
          nullable: true
        imageId:
          type: integer
          format: int32
      additionalProperties: false
      
    Annotation:
      required:
        - annotationTree
        - imgId
        - userId
      type: object
      properties:
        id:
          type: integer
          format: int32
        userId:
          minLength: 1
          type: string
        imgId:
          type: integer
          format: int32
        annotationTree:
          $ref: '#/components/schemas/VesselAnnotation'
      additionalProperties: false
    VesselAnnotation:
      required:
        - description
        - imagePath
        - isVisible
        - points
        - segments
        - type
      type: object
      properties:
        id:
          type: integer
          format: int32
        imagePath:
          minLength: 1
          type: string
        points:
          type: array
          items:
            $ref: '#/components/schemas/VesselPoint'
        segments:
          type: array
          items:
            $ref: '#/components/schemas/VesselSegment'
        description:
          minLength: 1
          type: string
        type:
          minLength: 1
          type: string
        isVisible:
          type: boolean
      additionalProperties: false
    VesselAnnotationModel:
      required:
        - description
        - imagePath
        - isVisible
        - points
        - segments
        - type
      type: object
      properties:
        id:
          type: integer
          format: int32
        imagePath:
          type: string
          nullable: true
        points:
          type: array
          items:
            $ref: '#/components/schemas/VesselPointModel'
          nullable: true
        segments:
          type: array
          items:
            $ref: '#/components/schemas/VesselSegmentModel'
          nullable: true
        description:
          type: string
          nullable: true
        type:
          type: string
          nullable: true
        isVisible:
          type: boolean
      additionalProperties: false
    VesselPoint:
      required:
        - id
        - isVisible
        - x
        - y
      type: object
      properties:
        id:
          type: integer
          format: int32
        x:
          type: integer
          format: int32
        y:
          type: integer
          format: int32
        isVisible:
          type: boolean
      additionalProperties: false
    VesselPointModel:
      required:
        - id
        - isVisible
        - x
        - y
      type: object
      properties:
        id:
          type: integer
          format: int32
        x:
          type: integer
          format: int32
        y:
          type: integer
          format: int32
        isVisible:
          type: boolean
      additionalProperties: false
    VesselSegment:
      required:
        - endPoint
        - id
        - isVisible
        - startPoint
        - thickness
      type: object
      properties:
        id:
          type: integer
          format: int32
        startPoint:
          $ref: '#/components/schemas/VesselPoint'
        endPoint:
          $ref: '#/components/schemas/VesselPoint'
        thickness:
          type: number
          format: double
        isVisible:
          type: boolean
      additionalProperties: false
    VesselSegmentModel:
      required:
        - endPoint
        - id
        - isVisible
        - startPoint
        - thickness
      type: object
      properties:
        id:
          type: integer
          format: int32
        startPoint:
          $ref: '#/components/schemas/VesselPointModel'
        endPoint:
          $ref: '#/components/schemas/VesselPointModel'
        thickness:
          type: number
          format: double
        isVisible:
          type: boolean
      additionalProperties: false
      
    Review:
      type: object
      properties:
        aId:
          type: integer
          format: "int64"
        mpId:
          type: integer
          format: "int64"
        id:
          type: integer
          format: "int64"
        review:
          type: string
          description: The body of the user's review 
        accepted:
          type: boolean
          description: Whether or not the review has been accepted
      required:
        - aId
        - mpId
        - id
        - review
    ReviewRequest:
      type: object
      properties:
        review:
          type: string
          description: The body of the user's review
        accepted:
          type: boolean
          description: Whether or not the review has been accepted
          
    UserModel:
      required:
        - userName
      type: object
      properties:
        userName:
          type: string
          nullable: true
      additionalProperties: false
      
    DatasetModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
        title:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        imageCount:
          type: integer
          format: int32
        imageIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        category:
          type: string
          nullable: true
        createdBy:
          $ref: '#/components/schemas/UserModel'
        createdAt:
          type: string
          format: date-time
          nullable: true
        annotatedBy:
          $ref: '#/components/schemas/UserModel'
        reviewedBy:
          $ref: '#/components/schemas/UserModel'
      additionalProperties: false
    ModifyDatasetResult:
      required:
        - statusCode
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
        error:
          type: string
          nullable: true
        dataset:
          $ref: '#/components/schemas/DatasetModel'
  
  securitySchemes:
    Bearer:
      type: apiKey
      description: JWT Authentication header
      name: Authorization
      in: header
      
security:
  - Bearer: [ ]
