@rendermode InteractiveServer
@page "/images/datasets/{dataset}/"
@inject IHttpClientFactory ClientFactory
@inject IHttpContextAccessor httpContextAccessor
@attribute [Authorize(Roles = "Administrator, Manager")]



@if (_errorExist)
{
    <Error/>
}
else if (!_existenseOfImages) //This will show on screen in a milisecond before imgs load. Should it be "Loading..."?
{
    <p><em>This Dataset is empty.</em></p>
} else
{
    <div style=" display: flex; flex-direction:row;"><!--To make both lines on the same row -->
        <span style="padding:2%; font-weight: bold; width: 90%; font-size: 215%">Dataset @dataset</span>
        <button class="filterButton">Filter by...</button>
    </div>

    <div class="container DivToScroll" >
    <!--Virtualize is a special loop that loops OverscanCount data - here the imgs received from API-->
        <Virtualize ItemsProvider="@LoadImages" OverscanCount="15">
            <!--OverscanCount must always be divisible by 3! As we have 3 imgs per line-->
            <!--It represents the number of images loaded before and after current position-->
            <ItemContent>
                <img class="displayImages" src="@GetImageSource(@context.Base64Data)" alt="@context.AltText" />
            </ItemContent>
        </Virtualize> 
    </div> 
}

@code{
    //TODO: code duplication from Image.Filter.razor
    [Parameter] public string dataset { get; set; } = "";//get access to parameter from URL/get request
    public ImageModelWeb[] images = Array.Empty<ImageModelWeb>(); //all imgs from API turned into local datatype class (see further down)
    private bool _errorExist = false;
    private bool _existenseOfImages = true;

    protected override async Task OnInitializedAsync()
    {
        //make connection to website
        var httpContext = httpContextAccessor.HttpContext ?? throw new InvalidOperationException("No HttpContext available");

        //authorization
        var accessToken = await httpContext.GetTokenAsync("access_token") ?? throw new InvalidOperationException("No access_token was saved");
        
        var client = ClientFactory.CreateClient();
        
        //connect to Web API
        client.BaseAddress = new("https://localhost:7250");

        //access endpoint
        using var requestMessage = new HttpRequestMessage(HttpMethod.Get, $"/images/datasets/{dataset}");

        //bearer token for authorization
        requestMessage.Headers.Authorization = new("Bearer", accessToken);

        //sending the response
        using var response = await client.SendAsync(requestMessage);//sending the response
        if (!response.IsSuccessStatusCode)
        {
            _existenseOfImages = false;
        }
        else
        {

            try
            {
                //string array of JSON files of the images as strings
                string[] answer = await response.Content.ReadFromJsonAsync<string[]>() ?? throw new NoNullAllowedException(); //string array of JSON files of the images as strings

                //initialize array for storing images to be shown on the webpage
                images = new ImageModelWeb[answer.Length];

                if (answer.Length == 0)
                {
                    _existenseOfImages = false;
                }

                for (int i = 0; i < answer.Length; i++)
                {
                    //JSON file becomes ImageModel object
                    var imageObject = System.Text.Json.JsonSerializer.Deserialize<ImageModel>(answer[i]); //JSON file becomes imageModel object
                    ArgumentNullException.ThrowIfNull(imageObject);
                    await Task.Yield();
                    //Byte array data for the image

                    var imageData = imageObject.ImageData;

                    //Adding Base64 data and alt text as local ImageModel type to array
                    images[i] = new ImageModelWeb(System.Convert.ToBase64String(imageData), imageObject.Description);
                }
            }
            catch //if nothing is retrieved - prints out error
            {
                Console.WriteLine("Status code: " + response.StatusCode);
                images = new ImageModelWeb[1];
                images[0] = new ImageModelWeb("", response.StatusCode.ToString());
                _errorExist = true;
            }
        }
    }

    //local datatype class for images
    public class ImageModelWeb 
    {
        public string Base64Data {get; set;}
        public string AltText {get; set;}
        
        public ImageModelWeb (string Base64DataInput, string AltTextInput) {
            Base64Data = Base64DataInput;
            AltText = AltTextInput;
        }
    }

    /* Define an item provider - IEnumerable of items to iterate over for Virtualize 
        Code inspired by: https://toxigon.com/implementing-lazy-loading-in-blazor */
    private async ValueTask<ItemsProviderResult<ImageModelWeb>> LoadImages(ItemsProviderRequest request)
    {
        await Task.Yield();
         return new ItemsProviderResult<ImageModelWeb>(images, images.Length);
    } 

    /* Converts the image base64 string into an url the website can render
        as an image. */
    public string GetImageSource(string base64)
    {
        return $"data:image;base64,{base64}";
    }
}
