// <auto-generated />
using System;
using Annotations.API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Annotations.API.Migrations
{
    [DbContext(typeof(AnnotationsDbContext))]
    [Migration("20250510190307_InitialSchema")]
    partial class InitialSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("Annotations.Core.Entities.Annotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AnnotationTreeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ImgId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("VesselAnnotationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AnnotationTreeId");

                    b.HasIndex("ImgId");

                    b.HasIndex("UserId");

                    b.HasIndex("VesselAnnotationId");

                    b.ToTable("Annotation");
                });

            modelBuilder.Entity("Annotations.Core.Entities.Dataset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AnnotatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("ImageIds")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ReviewedBy")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Datasets");
                });

            modelBuilder.Entity("Annotations.Core.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("DatasetsIds")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("UploadedByUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UploadedByUserId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Annotations.Core.Entities.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Annotations.Core.VesselObjects.VesselAnnotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("VesselAnnotation");
                });

            modelBuilder.Entity("Annotations.Core.VesselObjects.VesselPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VesselAnnotationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("X")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Y")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VesselAnnotationId");

                    b.ToTable("VesselPoint");
                });

            modelBuilder.Entity("Annotations.Core.VesselObjects.VesselSegment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EndPointId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StartPointId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Thickness")
                        .HasColumnType("REAL");

                    b.Property<int?>("VesselAnnotationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EndPointId");

                    b.HasIndex("StartPointId");

                    b.HasIndex("VesselAnnotationId");

                    b.ToTable("VesselSegment");
                });

            modelBuilder.Entity("Annotations.Core.Entities.Annotation", b =>
                {
                    b.HasOne("Annotations.Core.VesselObjects.VesselAnnotation", "AnnotationTree")
                        .WithMany()
                        .HasForeignKey("AnnotationTreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Annotations.Core.Entities.Image", null)
                        .WithMany()
                        .HasForeignKey("ImgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Annotations.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Annotations.Core.VesselObjects.VesselAnnotation", null)
                        .WithMany()
                        .HasForeignKey("VesselAnnotationId");

                    b.Navigation("AnnotationTree");
                });

            modelBuilder.Entity("Annotations.Core.Entities.Image", b =>
                {
                    b.HasOne("Annotations.Core.Entities.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedByUserId");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("Annotations.Core.VesselObjects.VesselPoint", b =>
                {
                    b.HasOne("Annotations.Core.VesselObjects.VesselAnnotation", null)
                        .WithMany("Points")
                        .HasForeignKey("VesselAnnotationId");
                });

            modelBuilder.Entity("Annotations.Core.VesselObjects.VesselSegment", b =>
                {
                    b.HasOne("Annotations.Core.VesselObjects.VesselPoint", "EndPoint")
                        .WithMany()
                        .HasForeignKey("EndPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Annotations.Core.VesselObjects.VesselPoint", "StartPoint")
                        .WithMany()
                        .HasForeignKey("StartPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Annotations.Core.VesselObjects.VesselAnnotation", null)
                        .WithMany("Segments")
                        .HasForeignKey("VesselAnnotationId");

                    b.Navigation("EndPoint");

                    b.Navigation("StartPoint");
                });

            modelBuilder.Entity("Annotations.Core.VesselObjects.VesselAnnotation", b =>
                {
                    b.Navigation("Points");

                    b.Navigation("Segments");
                });
#pragma warning restore 612, 618
        }
    }
}
