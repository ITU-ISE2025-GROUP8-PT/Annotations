@rendermode InteractiveServer
@page "/images/annotations"
@using Home
@implements IDisposable
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "Administrator, Manager, AnnotationsUser")]



<PageTitle>Annotations</PageTitle>
<AuthorizeView>
    <Authorized>
        <MatThemeProvider Theme="@_theme">
            <MatDialog @bind-IsOpen="@_showCompletionDialog">
                <MatDialogTitle>@_completionTitle</MatDialogTitle>
                <MatDialogContent>
                    @_completionMessage
                    @if (_completionTitle == "Success")
                    {
                        <p>
                            <MatTextField @bind-Value="_currentVesselAnnotation.Description"
                                          Label="Annotation"
                                          FullWidth="true"
                                          Immediate="true"
                                          Id="annotationTextField"
                                          class="MatOverwriteWhiteBG">
                            </MatTextField>
                        </p>
                    }
                </MatDialogContent>
                <MatDialogActions>

                    <MatButton OnClick="@(() => { _showCompletionDialog = false; StateHasChanged();})">OK</MatButton>
                </MatDialogActions>
            </MatDialog>

            <MatDialog @bind-IsOpen="_showSegmentDialog">
                <MatDialogTitle>Blood vessel segment annotation</MatDialogTitle>
                <MatDialogContent>
                    <p>
                        <MatTextField @bind-Value="_currentSegment.Text"
                                      Label="Annotation"
                                      FullWidth="true"
                                      Immediate="true"
                                      class="MatOverwriteWhiteBG">
                        </MatTextField>
                    </p>
                    <p>
                        <MatTextField @bind-Value="_currentSegment.Thickness"
                                      Label="Blood vessel thickness"
                                      FullWidth="true"
                                      Immediate="true"
                                      class="MatOverwriteWhiteBG">
                        </MatTextField>
                    </p>
                    <p>
                        <MatSelectItem @bind-Value="@_currentSegment.Type" Label="Type" Items="@_types"></MatSelectItem>
                    </p>
                </MatDialogContent>
                <MatDialogActions>
                    <div>
                        <MatButton class="MatOverwriteButton" OnClick="SaveSegmentAnnotation">Save</MatButton>
                        <MatButton class="MatOverwriteButton" OnClick="CancelSegmentAnnotation">Cancel</MatButton>
                    </div>
                </MatDialogActions>
            </MatDialog>

            <div class="mat-layout-grid">
                <div class="mat-layout-grid-inner">
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                        <div class="MatOverwriteGrid">
                            <img src="img/billede1.png" alt="Profile Picture" class="MatOverwriteProfilePic">
                            <div>
                                <b>Jane Doe</b>
                                <br/>
                                <small>Surgeon</small>
                            </div>
                        </div>
                        <div class="MatOverwriteMarginTop50">
                            <p>Choose a type here</p>
                            <MatRadioGroup @bind-Value="@_currentVesselAnnotation.Type">
                                <div>
                                    <MatRadioButton TValue="string">Arteries</MatRadioButton>
                                </div>
                                <div>
                                    <MatRadioButton TValue="string">Veins</MatRadioButton>
                                </div>
                            </MatRadioGroup>
                        </div>
                        </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
                        <div class="mat-layout-grid-inner">
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                                <div class="MatOverwriteIdentification">
                                    <MatTabGroup>
                                        <MatTab Label="Vessels">
                                            <div class="MatOverwritePadding16">
                                                <b>Blood Vessel Identification</b>
                                            </div>
                                        </MatTab>
                                        <MatTab Label="Flow">
                                            <div class="MatOverwritePadding16">
                                                <b>Blood Flow Identification</b>
                                            </div>
                                        </MatTab>
                                        <MatTab Label="Organs">
                                            <div class="MatOverwritePadding16">
                                                <b>Organ Identification</b>
                                            </div>
                                        </MatTab>
                                    </MatTabGroup>
                                </div>
                            </div>
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-9 mat-layout-grid-align-right">
                                <div class="MatOverwriteDecisions">
                                    <MatButton>Skip</MatButton>
                                    <MatButton OnClick="CompleteCurrentVessel" class="MatOverwriteButton">Complete</MatButton>
                                </div>
                            </div>
                        </div>

                        <div class="MatOverwriteRelative" @ref="_imageContainer">
                            <img src="img/SkÃ¦rmbillede%202025-03-27%20kl.%2014.05.56.png" alt="Annotation Image" 
                                 @onclick="HandleImageClick" class="MatOverwriteWorkImage"/>

                            <svg @onpointermove="HandleDrag"
                                 @onpointerup="EndDrag"
                                 @onpointerleave="EndDrag"
                                 class="MatOverwriteSVG">

                                @foreach (var segment in _drawableSegments)
                                {
                                    <line x1="@segment.StartPoint!.X" y1="@segment.StartPoint.Y"
                                          x2="@segment.EndPoint!.X" y2="@segment.EndPoint.Y"
                                          stroke="transparent"
                                          stroke-width="20"
                                          @onclick="@(() => HandleSegmentClick(segment))"
                                          pointer-events="visibleStroke"/>

                                    <line x1="@segment.StartPoint.X" y1="@segment.StartPoint.Y"
                                          x2="@segment.EndPoint.X" y2="@segment.EndPoint.Y"
                                          stroke="white"
                                          stroke-width="2"
                                          pointer-events="none"/>
                                }

                                @foreach (var point in _drawablePoints)
                                {
                                    if (point.isVisible)
                                    {
                                        <circle cx="@point.X" cy="@point.Y" r="10"
                                                fill="white" stroke="white"
                                                stroke-width="2"
                                                @onpointerdown="@(e => StartDrag(e, point))"
                                                @onclick="@(() => HandlePointClick(point))"
                                                class="MatOverwriteCursor"/>
                                    }
                                }

                                @if (_currentVesselAnnotation != null)
                                {
                                    @foreach (var segment in _currentVesselAnnotation.Segments)
                                    {
                                        <line x1="@segment.StartPoint!.X" y1="@segment.StartPoint.Y"
                                              x2="@segment.EndPoint!.X" y2="@segment.EndPoint.Y"
                                              stroke="transparent"
                                              stroke-width="20"
                                              @onclick="@(() => HandleSegmentClick(segment))"
                                              pointer-events="visibleStroke"/>

                                        <line x1="@segment.StartPoint.X" y1="@segment.StartPoint.Y"
                                              x2="@segment.EndPoint.X" y2="@segment.EndPoint.Y"
                                              stroke="white"
                                              stroke-width="2"
                                              pointer-events="none"/>
                                    }

                                    @foreach (var point in _currentVesselAnnotation.Points)
                                    {
                                        <circle cx="@point!.X" cy="@point.Y" r="10"
                                                fill="white" stroke="white"
                                                stroke-width="2"
                                                @onclick="@(() => HandlePointClick(point))"
                                                @onpointerdown="@(e => StartDrag(e, point))"
                                                class="MatOverwriteCursor"/>
                                    }
                                }
                            </svg>
                        </div>
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                        <MatAccordion Multi="true">
                            @for (var i = 0; i < _savedVessels.Count; i++)
                            {
                                var i1 = i;
                                <MatExpansionPanel>
                                    <MatExpansionPanelSummary>

                                        <MatExpansionPanelHeader> Tree @i1 </MatExpansionPanelHeader>
                                    </MatExpansionPanelSummary>
                                    <MatExpansionPanelDetails>
                                        @for (var j = 0; j < _savedVessels[i1].Points.Count; j++)
                                        {
                                            var j1 = j;
                                            var point = _savedVessels[i1].Points[j1];
                                            <p> point @j </p>
                                            
                                            <MatIconButton Icon="visibility" OnClick="() => point!.isVisible = false">
                                            </MatIconButton>
                                        }
                                    </MatExpansionPanelDetails>
                                </MatExpansionPanel>
                            }
                        </MatAccordion>
                    </div>
                </div>
            </div>
        </MatThemeProvider>
    </Authorized>
    <NotAuthorized>
        <Home/>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string? _currentUrl;
    private bool _arteriesMarked;
    private bool _veinsMarked;

    private bool _showCompletionDialog;
    private string _completionMessage = "";
    private string _completionTitle = "";

    private bool _showTextField;
    private bool _showSegmentDialog;

    private VesselPoint? _draggedPoint;
    private VesselPoint _currentPoint = new VesselPoint();
    private VesselSegment _currentSegment = new VesselSegment();

    private VesselAnnotation? _currentVesselAnnotation = new VesselAnnotation();
    private List<VesselAnnotation> _savedVessels = new List<VesselAnnotation>();

    private List<VesselSegment> _drawableSegments = new();
    private List<VesselPoint> _drawablePoints = new();

    private string _currentVesselType = "";
    private double _currentThickness = 0.0;

    private ElementReference _imageContainer;

    private string[] _types =
    [
        "Artery",
        "Vein",
        "Flow direction"
    ];

    MatTheme _theme = new MatTheme()
    {
        Primary = MatThemeColors.Green._800.Value
    };

    protected override void OnInitialized()
    {
        _currentUrl = Navigation.Uri;
        Navigation.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _currentUrl = Navigation.Uri;
        StateHasChanged();
    }
    
    private void HandleSegmentClick(VesselSegment segment)
    {
        _currentSegment = segment;
        _showSegmentDialog = true;

        StateHasChanged();
    }

    
    private void HandlePointClick(VesselPoint point)
    {
        _currentPoint = point;
        
        
    }
    
    public void Dispose() => Navigation.LocationChanged -= OnLocationChanged;

    private void PrecomputeAnnotations()
    {
        _drawableSegments.Clear();
        _drawablePoints.Clear();

        foreach (var vessel in _savedVessels)
        {
            if (vessel.Segments != null)
            {
                _drawableSegments.AddRange(vessel.Segments);
            }

            if (vessel.Points != null)
            {
                _drawablePoints.AddRange(vessel.Points.Where(point => point != null).Cast<VesselPoint>());
            }
        }
    }

    private void SavePointAnnotation(VesselPoint lastPoint)
    {
        if (_currentVesselAnnotation != null)
        {
            _currentVesselAnnotation.Points.Add(_currentPoint);

            if (_currentVesselAnnotation.Points.Count > 1)
            {
                var segment = new VesselSegment
                {
                    StartPoint = lastPoint,
                    EndPoint = _currentPoint,
                    Type = _currentVesselType,
                    Thickness = _currentThickness,
                    Text = _currentPoint.Text
                };
                _currentVesselAnnotation.Segments.Add(segment);
            }
        }

        _currentPoint.isVisible = true;
        _showTextField = false;
        StateHasChanged();
        PrecomputeAnnotations();
    }

    private void CancelPointAnnotation()
    {
        _showTextField = false;
        StateHasChanged();
    }

    private void SaveSegmentAnnotation()
    {
        _showSegmentDialog = false;
        StateHasChanged();
        PrecomputeAnnotations();
    }

    private void CancelSegmentAnnotation()
    {
        _showSegmentDialog = false;
        StateHasChanged();
    }

    private void CompleteCurrentVessel()
    {
        if (_currentVesselAnnotation?.Points.Count < 2)
        {
            _completionTitle = "Fail";
            _completionMessage = "Your blood vessel tree needs at least two annotations";
            _showCompletionDialog = true;
            StateHasChanged();
            return;
        }
        
        if (_currentVesselAnnotation.Type == "")
        {
            _completionTitle = "Fail";
            _completionMessage = "Please choose a type.";
            _showCompletionDialog = true;
            StateHasChanged();
            return;
        } 


        _savedVessels.Add(_currentVesselAnnotation!);
        _currentVesselAnnotation = new VesselAnnotation();

        _completionTitle = "Success";
        _completionMessage = "Your blood vessel tree has been successfully completed";
        _showCompletionDialog = true;
        



        PrecomputeAnnotations();
        StateHasChanged();
    }

    private async Task HandleImageClick(MouseEventArgs e)
    {
        var rect = await JsRuntime.InvokeAsync<BoundingClientRect>(
            "getBoundingClientRect", _imageContainer);

        var lastPoint = _currentPoint; 
        _currentPoint = new VesselPoint
        {
            X = (int)(e.ClientX - rect.Left),
            Y = (int)(e.ClientY - rect.Top),
            Type = _currentVesselType
        };

        SavePointAnnotation(lastPoint);

        StateHasChanged();
    }

    private void StartDrag(PointerEventArgs e, VesselPoint point)
    {
        _draggedPoint = point;
    }

    private async Task HandleDrag(PointerEventArgs e)
    {
        if (_draggedPoint == null) return;

        var rect = await JsRuntime.InvokeAsync<BoundingClientRect>(
            "getBoundingClientRect", _imageContainer);

        _draggedPoint.X = (int)(e.ClientX - rect.Left);
        _draggedPoint.Y = (int)(e.ClientY - rect.Top);

        StateHasChanged();
    }

    private void EndDrag() => _draggedPoint = null;

    private struct BoundingClientRect
    {
        public double Left { get; set; }
        public double Top { get; set; }
    }

    private class VesselPoint
    {
        public bool isVisible;
        public int X { get; set; }
        public int Y { get; set; }
        public string Text { get; set; } = "";
        public string Type { get; set; } = "";
    }

    private class VesselSegment
    {
        public VesselPoint? StartPoint { get; set; }
        public VesselPoint? EndPoint { get; set; }
        public string Text { get; set; } = "";
        public double Thickness { get; set; } = 1.0;
        public string Type { get; set; } = "";
    }

    private class VesselAnnotation
    {
        public List<VesselPoint?> Points { get; } = new();
        public List<VesselSegment> Segments { get; } = new();
        public string Description { get; set; } = "";
        public string Type { get; set; } = "";
    }

    [Inject] private IJSRuntime JsRuntime { get; set; } = default!;

    private void toggleVisibillity(MouseEventArgs obj)
    {
        throw new NotImplementedException();
    }

}