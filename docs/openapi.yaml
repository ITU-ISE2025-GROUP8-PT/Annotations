openapi: 3.0.3
info:
  title: Annotations PerfusionTech
  description:  |
    This API allows medical professionals to annotate angiographic images, and review other users' annotations.
    The API allows the Admin user role to upload and delete angiographic images.
    Users can only be created or deleted by any user with the Admin user role, following RBAC principles.
    
  version: 1.2.0
tags:
  - name: Reviews
    description: Operations related to reviewing angiographic images.
  - name: Annotations
    description: Operations related to annotating angiographic images.
  - name: Images
    description: Operations related to managing the angiographic images.
  - name: Users
    description: Operations related to managing users and user roles. Most of these operations are handled by the CMS system Orchard Core, maintaining our user base.
paths:
  /images/upload:
    post:
      summary: Upload an image
      description: Admin can upload angiographic images for reviewers and annotators to use.
      tags:
        - Images
      parameters:
        - name: category
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - image
              type: object
              properties:
                image:
                  type: string
                  format: binary
            encoding:
              image:
                style: form
      responses:
        '201':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageUploaderResult'
  /images/delete/{imageId}:
    delete:
      summary: Delete an image
      description: An admin user role, can delete angiographic images if needed.
      tags:
        - Images
      parameters:
        - name: imageId
          in: path
          required: true
          schema:
            type: integer
            format: int32
          description: The unique image ID for the specified image
      responses:
        '204': # Successful request, with nothing to be returned to the client
          description: Image was successfully deleted
        '404':
          description: Image not found
        '401':
          description: Unauthorized (authentication required)
  /images/get/{imageId}:
    get:
      summary: Get an image by imageId
      description: All user roles will be able to access an image by imageId
      tags:
        - Images
      parameters:
        - name: imageId
          in: path
          required: true
          schema:
            type: integer
            format: int32
          description: The unique image ID for the specified image
      responses:
        '200':
          description: OK
        '404':
          description: Image not found
  /images/get-metadata/{imageId}:
    get:
      tags:
        - Images
      parameters:
        - name: imageId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /images/filter/{category}:
    get:
      tags:
        - Images
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImageModel'
                  
  /images/annotations/save:
    post:
      tags:
        - Annotations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VesselAnnotationModel'
        required: true
      responses:
        '200':
          description: OK
  /images/annotations/{annotationId}:
    get:
      tags:
        - Annotations
      parameters:
        - name: annotationId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotation'
  /images/annotations:
    get:
      tags:
        - Annotations
      parameters:
        - name: imagePath
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  
  /annotations/{annotationId}/review:
    post:
      summary: Add a review to an annotation
      operationId: createReview
      tags:
        - Reviews
      requestBody:
        description: The review object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
      responses:
        '200':
          description: Review was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
  /reviews/{reviewId}:              
    patch:
      summary: Update a review
      description: Can only be done by the Admin user role, or the reviewer of the annotation
      operationId: updateReview
      tags:
        - Reviews
      parameters:
        - in: path
          name: reviewId
          description: The review ID of the review to be updated
          required: true
          schema:
            type: integer
            format: "int64"
      requestBody:
        description: The updated Review object
        required: true
        content:
          application/json:
            schema:
              type: string
              description: The body of the updated review
      responses:
        '200':
          description: Review was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'        
    delete:
      summary: Delete a review
      description: Can only be done by the Admin user role, or the reviewer of the annotation
      tags:
        - Reviews
      operationId: deleteReview
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: integer
            format: "int64"
          description: Review ID of the review that needs to be deleted
      responses:
        '204':
          description: Review was successfully deleted, nothing to return
        '400':
          description: Invalid review ID supplied
        '404':
          description: Review not found
          
  /users/users:
    get:
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserModel'
        
components: 
  schemas:
    UserCreateRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
          description: Some generated password, that can later be changed by the user
        phone:
          type: string
        jobTitle:
          type: string
        affiliation:
          type: string
        profilePicture:
          type: string
          format: binary
        userRole:
          type: string
          enum: [ "admin", "annotator", "reviewer" ]
      required:
        - email
        - password
        - role
    UserUpdateRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        jobTitle:
          type: string
        affiliation:
          type: string
        profilePicture:
          type: string
          format: binary
        userRole:
          type: string
          description: The specified user's authorization (Can only be changed by Admin)
          enum: [ "admin", "annotator", "reviewer" ]
    User:
      type: object
      properties: 
        id:
          type: integer
          format: "int64"
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        jobTitle:
          type: string
        affiliation:
          type: string
        profilePicture:
          type: string
          format: binary
        totalAssignmentsFinished:
          type: integer
        userRole:
          type: string
          description: The specified user's authorization
          enum: [ "admin", "annotator", "reviewer" ]
      required:
        - id
        - password
        - userRole
    Image:
      type: object
      properties:
        id:
          type: integer
          format: "int64"
        uploadedBy:
          type: integer
          format: "int64"
          description: The ID of the Admin that uploaded the image
        deletedBy:
          type: integer
          format: "int64"
          description: The ID of the Admin that deleted the image
        imageString:
          type: string
          format: binary
          description: The image file to upload
        title:
          type: string
          description: A title for the image
        description: #name of the field
          type: string
          description: A description of the image    
      required:
        - id
        - imageString
    ImageRequest:
      type: object
      properties:
        imageString:
          type: string
          format: binary
          description: The image file to upload
        title:
          type: string
          description: A title for the image
        description: #name of the field
          type: string
          description: A description of the image
      required:
        - imageString
    Annotation:
      type: object
      properties: 
        imgId:
          type: integer
          format: "int64"
        mpId:
          type: integer
          format: "int64"
        id:
          type: integer
          format: "int64"
        annotationType:
          type: string
          description: The type of annotation made by the user
          # TODO: make enum of different annotation types
        annotations:
          type: string
          description: The annotations made by the user on the specific image
      required:
        - imgId
        - mpId
        - id
    AnnotationRequest:
      type: object
      properties:
        annotationType:
          type: string
          description: The type of annotation made by the user
          # TODO: make enum of different annotation types
        annotations:
          type: string
          description: The annotations made by the user on the specific image
    Review:
      type: object
      properties:
        aId:
          type: integer
          format: "int64"
        mpId:
          type: integer
          format: "int64"
        id:
          type: integer
          format: "int64"
        review:
          type: string
          description: The body of the user's review 
        accepted:
          type: boolean
          description: Whether or not the review has been accepted
      required:
        - aId
        - mpId
        - id
        - review
    ReviewRequest:
      type: object
      properties:
        review:
          type: string
          description: The body of the user's review
        accepted:
          type: boolean
          description: Whether or not the review has been accepted
  /datasets/overview:
    get:
      tags:
        - DatasetEndpoints
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DatasetModel'
  /datasets/get/{datasetId}:
    get:
      tags:
        - DatasetEndpoints
      parameters:
        - name: datasetId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /datasets/create:
    post:
      tags:
        - DatasetEndpoints
      parameters:
        - name: title
          in: query
          required: true
          schema:
            type: string
        - name: category
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModifyDatasetResult'
  /datasets/delete/{datasetId}:
    delete:
      tags:
        - DatasetEndpoints
      parameters:
        - name: datasetId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /datasets/set-images/{datasetId}:
    put:
      tags:
        - DatasetEndpoints
      parameters:
        - name: datasetId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModifyDatasetResult'
    /images/annotations/exception:
    get:
      tags:
        - Annotations.API
      responses:
        '200':
          description: OK
  /error:
    get:
      tags:
        - Annotations.API
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string