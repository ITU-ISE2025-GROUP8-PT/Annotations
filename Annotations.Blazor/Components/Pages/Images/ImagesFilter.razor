@page "/images/filter/{category}"
@inject IHttpClientFactory ClientFactory
@inject IHttpContextAccessor httpContextAccessor
@inject IImagesServices imagesServices
@attribute [Authorize(Roles = "Administrator, Manager")]
<!-- Look at the roles, is it only for certain types? -->

@if (_errorExist)
{
    <Error/>
}
else if (!_existenseOfImages){
    <p><em>No images found for category @category </em></p>
}
else 
{
    <div style=" display: flex; flex-direction:row;"><!--To make both lines on the same row -->
        
        <span style="padding:2%; font-weight: bold; width: 90%; font-size: 215%">Images of category "@category"</span><!--width is mainly for the placement of the filter button -->
        <button class="filterButton">Filter by...</button>
        
    </div>

        
    <div class="container DivToScroll">
        @for (int i = 0; i < images.Length; i++)
        {
            <img class="displayImages" alt="@altText[i]" src="data:image;base64, @images[i]"/><!--src is a URL - it's converted from a string of the byte array-->
        }
    </div>
}

@code{
    [Parameter] public string category { get; set; } = "";//get access to parameter from URL/get request
    private string[] images = new []{""};//all byte arrays as strings
    private string[] altText = new []{""};
    private bool _errorExist = false;
    private bool _existenseOfImages = true;
    
    
    [Inject] private NavigationManager Navigation { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        
        var response = await imagesServices.createResponse($"/images/filter/{category}");//sending the response
        try
        {
            string[] answer = await response.Content.ReadFromJsonAsync<string[]>() ?? throw new NoNullAllowedException(); //string array of JSON files of the images as strings
            if (answer.Length == 0)
            {
                _existenseOfImages = false;
            }
            images = new string[answer.Length];
            altText = new string[answer.Length];
            for (int i = 0; i < answer.Length; i++)
            {
                var imageObject = System.Text.Json.JsonSerializer.Deserialize<ImageModel>(answer[i]) ?? throw new NoNullAllowedException();//JSON file becomes imageModel object
                var imageData = imageObject.ImageData;
                altText[i] = imageObject.Description;
                images[i] = System.Convert.ToBase64String(imageData);//byte array to string
            }
        }
        catch //if nothing is retrieved - prints out error
        {
            Console.WriteLine("Status code: " + response.StatusCode);
            images = new string[1];
            images[0] = response.StatusCode.ToString();
            _errorExist = true;
        }

    }

}
