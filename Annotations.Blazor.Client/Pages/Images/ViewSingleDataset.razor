@page "/images/datasets/{datasetId}/"
@using Annotations.Core.Models
@using Microsoft.AspNetCore.Authorization
@using global::Annotations.Blazor.Client.Services
@inject IDatasetAccessor DatasetAccessor
@attribute [Authorize(Roles = "Administrator, Manager")]

@if (error)
{
    <p>Der opstod desværre en fejl. Prøv igen, eller kontakt din system administrator hvis problemet forsætter.</p>
}
else if (dataset != null)
{
    <div style=" display: flex; flex-direction:row;">
        <span style="padding:2%; font-weight: bold; width: 90%; font-size: 215%">Dataset @datasetId</span>
        <button class="filterButton">Filter by...</button>
    </div>

    <div class="container DivToScroll" >
        @* Virtualize is a special loop that loops OverscanCount data - here the imgs received from API *@
        <Virtualize Items="@idGroups" OverscanCount="1">
            <ItemContent>
                <p class="imageRowContainer">
                    @* Loads up to 3 images per row *@
                    @foreach (var id in context)
                    {
                        @* If the image ID is -1, we don't want to display anything *@
                        if (id == -1)
                        {
                            <div class="imageOnRowContainer" />
                        }
                        else
                        {
                            <div class="imageOnRowContainer">
                                <img class="imageInContainer" src="@($"/api/images/get/{id}")" alt="Image with ID @id" />
                            </div>
                        }
                    }
                </p>
            </ItemContent>
        </Virtualize>
    </div>
}

@code
{
    [Parameter] public string datasetId { get; set; } = "";

    private DatasetModel? dataset;
    private bool error;

    private IList<IList<int>> idGroups = new List<IList<int>>();

    protected override async Task OnInitializedAsync()
    {
        dataset = await DatasetAccessor.GetDatasetAsync(datasetId);

        if (dataset == null)
        {
            error = true;
            return;
        }

        for (int i = 0; i < 3 && dataset.ImageIds.Count % 3 != 0; i++)
        {
			dataset.ImageIds.Add(-1);
        }

        for (int i = 0; i < dataset.ImageIds.Count; i += 3)
        {
			idGroups.Add(dataset.ImageIds.Skip(i).Take(3).ToList());
        }
    }
}
