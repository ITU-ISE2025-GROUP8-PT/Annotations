@page "/images/datasets"
@using global::Annotations.Blazor.Services
@rendermode InteractiveServer
@inject IHttpClientFactory ClientFactory
@inject IHttpContextAccessor httpContextAccessor
@inject IAPIServices IapiServices
@attribute [Authorize(Roles = "Administrator, Manager")]

<div style=" display: flex; flex-direction:row;">
    <span style="margin-left:13%; margin-top:0.0001%; padding-bottom:2%; font-weight: bold; width: 72%; font-size: 215%">Manage datasets</span>
    <div style="width:15%">
        <button class="orderingButton">Order by...</button>
    </div>
</div>

@if (_error)
{
    <p>Der opstod desværre en fejl. Prøv igen, eller kontakt din system administrator hvis problemet forsætter.</p>
}

<MatThemeProvider Theme="_theme">
    <MatTable Items="Datasets" class="table-formatting">
        <MatTableHeader>
            <th>Dataset ID</th>
            <th>No. of Images</th>
            <th>Category</th>
            <th>Annotated By</th>
            <th>Reviewed By</th>
        </MatTableHeader>
        <MatTableRow>
            <td>
                <MatButtonLink href="@($"https://localhost:7238/images/datasets/{context.Id}")">@context.Id</MatButtonLink>
            </td>
            <td>
                @context.ImageIds.Count
            </td>
            <td>
                @context.Category
            </td>
            <td>
                @context.AnnotatedBy
            </td>
            <td>
                @context.ReviewedBy
            </td>
        </MatTableRow>
    </MatTable>
</MatThemeProvider>

@code{
    public List<Dataset> Datasets = new List<Dataset>();
    private bool _error;
    
    private MatTheme _theme = new MatTheme()
    {
        Primary = MatThemeColors.Green._800.Value
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            @* Storing the incomming response in a variable, so that we can check if there is an error *@
            var response = await IapiServices.CreateGetResponse($"/images/datasets/");
            if (response.IsSuccessStatusCode)
            {
                var datasetmodels = await response.Content.ReadFromJsonAsync<DatasetModel[]>();
                ArgumentNullException.ThrowIfNull(datasetmodels);
                await Task.Yield();
                @* Iterating over the datasetmodels and adding them to the Datasets list *@
                foreach (var datasetmodel in datasetmodels)
                {
                    Datasets.Add(new Dataset(datasetmodel.Id,
                    datasetmodel.ImageIds,
                    datasetmodel.Category,
                    datasetmodel.AnnotatedBy,
                    datasetmodel.ReviewedBy));
                }
            }
            @* If there is an error response, the error is updated to true *@
            else
            {
                _error = true;
            }
        }
        catch 
        {
            _error = true;
        }
    }

    public class Dataset
    {
        public int Id { get; set; }
        
        public List<int> ImageIds{ get; set; }
   
        public string Category { get; set; }
   
        public int AnnotatedBy { get; set; }
 
        public int ReviewedBy { get; set; }
        
        public Dataset(int id, List<int> imageIds, string category, int annotatedBy, int reviewedBy)
        {
            Id = id;
            ImageIds = imageIds;
            Category = category;
            AnnotatedBy = annotatedBy;
            ReviewedBy = reviewedBy;
        }
    }
}