// <auto-generated />
using System;
using Annotations.API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Annotations.API.Migrations
{
    [DbContext(typeof(AnnotationsDbContext))]
    [Migration("20250423141236_VesselTreeModelAdded")]
    partial class VesselTreeModelAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("Annotations.Core.Entities.Image", b =>
                {
                    b.Property<string>("ImageId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OriginalFilename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeUploaded")
                        .HasColumnType("TEXT");

                    b.Property<string>("UploadedByUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ImageId");

                    b.HasIndex("UploadedByUserId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Annotations.Core.Entities.ImageSeries", b =>
                {
                    b.Property<long>("ImageSeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("TEXT");

                    b.HasKey("ImageSeriesId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("ImageSeries");
                });

            modelBuilder.Entity("Annotations.Core.Entities.ImageSeriesEntry", b =>
                {
                    b.Property<string>("ImageId")
                        .HasColumnType("TEXT");

                    b.Property<long>("ImageSeriesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("ImageId", "ImageSeriesId");

                    b.HasIndex("ImageSeriesId");

                    b.ToTable("ImageSeriesEntry");
                });

            modelBuilder.Entity("Annotations.Core.Entities.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Annotations.Core.Entities.Image", b =>
                {
                    b.HasOne("Annotations.Core.Entities.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("Annotations.Core.Entities.ImageSeries", b =>
                {
                    b.HasOne("Annotations.Core.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Annotations.Core.Entities.ImageSeriesEntry", b =>
                {
                    b.HasOne("Annotations.Core.Entities.Image", null)
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Annotations.Core.Entities.ImageSeries", null)
                        .WithMany("ImageEntries")
                        .HasForeignKey("ImageSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Annotations.Core.Entities.ImageSeries", b =>
                {
                    b.Navigation("ImageEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
