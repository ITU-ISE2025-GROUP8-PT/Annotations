@page "/images/datasets/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authentication
@using global::Annotations.Core.Models
@inject IHttpClientFactory ClientFactory
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager NavigationManager
<style>
    .orderingButton {/*for functionality later on*/
        border: 5px;
        cursor: pointer;
        background-color: transparent;
        font-size: 130%;
        text-align: center;
        margin-top:20%;
        margin-left: 10%;
        text-decoration: underline;
    }

    .table-formatting {
        position: relative;
        border-collapse: collapse;
        border-spacing: 0;
        overflow-x: auto;
        margin-left: 10%;
        margin-right: 10%;
        width: 80%;
        background-color: #e3e7ee;
        padding-top: 0.8%;
        padding-bottom: 0.3%;
        padding-left: 1%;
        margin-bottom: 1%;
        margin-top: 1%;
        border-radius: 10px 10px 10px 10px;
        text-align: center;
    }

    .table-formatting th {
        padding:0;
        margin: 2%; 
        width: 22.5%;
        height: 0%;

        border: none;
        background: #e3e7ee;
    }

    .table-formatting td {
        text-align: center;
        padding:0;
        margin: 2%; 

        width: 22.5%;
        background: #e3e7ee;
    }

</style>

<div style=" display: flex; flex-direction:row;">
    <span style="margin-left:13%; margin-top:0.0001%; padding-bottom:2%; font-weight: bold; width: 72%; font-size: 215%">Manage datasets</span>
    <div style="width:15%">
        <button class="orderingButton">Order by...</button>
    </div>
</div>

<MatThemeProvider Theme="_theme">
    <MatTable Items="Datasets" class="table-formatting">
        <MatTableRow>
            <td>
                <MatButtonLink href="@($"https://localhost:7238/images/datasets/{context.Id}")">Dataset: @context.Id</MatButtonLink>
            </td>
            <td>
                Images in Dataset: @context.ImageIds.Count
            </td>
            <td>
                Category: @context.Category
            </td>
            <td>
                Annotated By: @context.AnnotatedBy
            </td>
            <td>
                Reviewed By: @context.ReviewedBy
            </td>

        </MatTableRow>
    </MatTable>
</MatThemeProvider>

@code{
    public List<Dataset>? Datasets = new List<Dataset>();//it only works as a list, not an array
    private bool _error; //this isn't used yet
    //TODO: error handling (what blazor pages returns)
    
    private MatTheme _theme = new MatTheme()
    {
        Primary = MatThemeColors.Green._900.Value
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var httpContext = httpContextAccessor.HttpContext ?? throw new InvalidOperationException("No HttpContext available");//make connection
            var accessToken = await httpContext.GetTokenAsync("access_token") ?? throw new InvalidOperationException("No access_token was saved");//authorization
            var client = ClientFactory.CreateClient();
            client.BaseAddress = new("https://localhost:7250");//connect to Web API
            using var requestMessage = new HttpRequestMessage(HttpMethod.Get, $"/images/datasets/");//access endpoint
            requestMessage.Headers.Authorization = new("Bearer", accessToken);//bearer token for authorization
            
            using var response = await client.SendAsync(requestMessage);//sending the response
            if (response.IsSuccessStatusCode)
            {
                var datasetmodels = await response.Content.ReadFromJsonAsync<DatasetModel[]>();//int array of all the ids of all the existing datasets
                foreach (var datasetmodel in datasetmodels)
                {
                    Datasets.Add(new Dataset(datasetmodel.Id,
                    datasetmodel.ImageIds,
                    datasetmodel.Category,
                    datasetmodel.AnnotatedBy,
                    datasetmodel.ReviewedBy));
                }
            }

            else
            {
                _error = true;
                Console.WriteLine("Status code: " + response.StatusCode);
            }
        }
        catch (Exception e)
        {
            _error = true;
            Console.WriteLine("Unknown error: " + e.Message);
        }
    }
    
    // Dataset model - to be expanded
    public class Dataset
    {
        public int Id { get; set; }
        public List<int> ImageIds{ get; set; }
   
        public string Category { get; set; }
   
        public int AnnotatedBy { get; set; }
 
        public int ReviewedBy { get; set; }
        
        public Dataset(int id, List<int> imageIds, string category, int annotatedBy, int reviewedBy)
        
        {
            Id = id;
            ImageIds = imageIds;
            Category = category;
            AnnotatedBy = annotatedBy;
            ReviewedBy = reviewedBy;
        }
    }
}
